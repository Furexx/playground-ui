interface ZoomImageOptions {
    factor: number;
    scale: number;
    shape: "circle" | "square";
    position: "cursor" | "fixed" | "cover";
    offset: [number, number];
    viewportClass: string | string[];
    zoomClass: string | string[];
    hide: boolean;
    placeAt?: string | HTMLElement;
}
declare class View {
    private reference;
    private options;
    private el?;
    constructor(reference: HTMLImageElement, options: ZoomImageOptions);
    setVisible(visible: boolean): void;
    get element(): HTMLDivElement;
    createView(): HTMLDivElement;
    updateDimensions(el?: HTMLDivElement): void;
    updatePosition(ev: MouseEvent, el?: HTMLDivElement): void;
    attachZoom(el: HTMLImageElement): void;
    detachZoom(el: HTMLImageElement): void;
    onMouseMove(ev: MouseEvent): void;
    onMouseEnter(ev: MouseEvent): void;
    onMouseLeave(ev: MouseEvent): void;
    destroy(): void;
}
declare class Zoom {
    private reference;
    private view;
    private options;
    private el?;
    constructor(reference: HTMLImageElement, view: View, options: ZoomImageOptions);
    get element(): HTMLImageElement;
    get viewportDimensions(): {
        width: number;
        height: number;
    };
    getCssDimensions(el: HTMLElement): {
        width: string;
        height: string;
    };
    getOffsetFactor(ev: MouseEvent): {
        x: number;
        y: number;
    };
    createZoom(): HTMLImageElement;
    onMouseMove(ev: MouseEvent): void;
    destroy(): void;
}
declare class ZoomImage {
    reference: HTMLImageElement;
    options: ZoomImageOptions;
    view: View;
    zoom: Zoom;
    constructor(reference: HTMLImageElement, options: ZoomImageOptions);
    setOptions(options: Partial<ZoomImageOptions>): void;
    create(): void;
    destroy(): void;
}
declare function attach(el: HTMLImageElement, zoom: ZoomImage): ZoomImage;
declare function detach(el: HTMLImageElement): void;
declare function get(el: HTMLImageElement | string): ZoomImage | undefined;
declare function has(el: HTMLImageElement | string): boolean;
declare function create(el: HTMLImageElement | string, options?: Partial<ZoomImageOptions>): ZoomImage;
export { attach, detach, get, has, create, ZoomImage };
